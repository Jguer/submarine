/* Submarine.h generated by valac 0.28.0, the Vala compiler, do not modify */


#ifndef __SUBMARINE_H__
#define __SUBMARINE_H__

#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <glib-object.h>
#include <gee.h>
#include <float.h>
#include <math.h>
#include <gio/gio.h>

G_BEGIN_DECLS


#define SUBMARINE_TYPE_CACHE_DATA (submarine_cache_data_get_type ())
#define SUBMARINE_CACHE_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SUBMARINE_TYPE_CACHE_DATA, SubmarineCacheData))
#define SUBMARINE_CACHE_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SUBMARINE_TYPE_CACHE_DATA, SubmarineCacheDataClass))
#define SUBMARINE_IS_CACHE_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SUBMARINE_TYPE_CACHE_DATA))
#define SUBMARINE_IS_CACHE_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SUBMARINE_TYPE_CACHE_DATA))
#define SUBMARINE_CACHE_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SUBMARINE_TYPE_CACHE_DATA, SubmarineCacheDataClass))

typedef struct _SubmarineCacheData SubmarineCacheData;
typedef struct _SubmarineCacheDataClass SubmarineCacheDataClass;
typedef struct _SubmarineCacheDataPrivate SubmarineCacheDataPrivate;

#define SUBMARINE_TYPE_LANGUAGE_INFO (submarine_language_info_get_type ())
typedef struct _SubmarineLanguageInfo SubmarineLanguageInfo;

#define SUBMARINE_TYPE_DATA_TYPE (submarine_data_type_get_type ())

#define SUBMARINE_TYPE_RESOLUTION (submarine_resolution_get_type ())

#define SUBMARINE_TYPE_CODEC (submarine_codec_get_type ())

#define SUBMARINE_TYPE_SOURCE (submarine_source_get_type ())

#define SUBMARINE_TYPE_NAME_PARSER_NODE (submarine_name_parser_node_get_type ())
#define SUBMARINE_NAME_PARSER_NODE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SUBMARINE_TYPE_NAME_PARSER_NODE, SubmarineNameParserNode))
#define SUBMARINE_NAME_PARSER_NODE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SUBMARINE_TYPE_NAME_PARSER_NODE, SubmarineNameParserNodeClass))
#define SUBMARINE_IS_NAME_PARSER_NODE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SUBMARINE_TYPE_NAME_PARSER_NODE))
#define SUBMARINE_IS_NAME_PARSER_NODE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SUBMARINE_TYPE_NAME_PARSER_NODE))
#define SUBMARINE_NAME_PARSER_NODE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SUBMARINE_TYPE_NAME_PARSER_NODE, SubmarineNameParserNodeClass))

typedef struct _SubmarineNameParserNode SubmarineNameParserNode;
typedef struct _SubmarineNameParserNodeClass SubmarineNameParserNodeClass;
typedef struct _SubmarineNameParserNodePrivate SubmarineNameParserNodePrivate;

#define SUBMARINE_TYPE_NAME_PARSER (submarine_name_parser_get_type ())
#define SUBMARINE_NAME_PARSER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SUBMARINE_TYPE_NAME_PARSER, SubmarineNameParser))
#define SUBMARINE_NAME_PARSER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SUBMARINE_TYPE_NAME_PARSER, SubmarineNameParserClass))
#define SUBMARINE_IS_NAME_PARSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SUBMARINE_TYPE_NAME_PARSER))
#define SUBMARINE_IS_NAME_PARSER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SUBMARINE_TYPE_NAME_PARSER))
#define SUBMARINE_NAME_PARSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SUBMARINE_TYPE_NAME_PARSER, SubmarineNameParserClass))

typedef struct _SubmarineNameParser SubmarineNameParser;
typedef struct _SubmarineNameParserClass SubmarineNameParserClass;
typedef struct _SubmarineNameParserPrivate SubmarineNameParserPrivate;

#define SUBMARINE_TYPE_SERVER_INFO (submarine_server_info_get_type ())
typedef struct _SubmarineServerInfo SubmarineServerInfo;

#define SUBMARINE_TYPE_SESSION (submarine_session_get_type ())
#define SUBMARINE_SESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SUBMARINE_TYPE_SESSION, SubmarineSession))
#define SUBMARINE_SESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SUBMARINE_TYPE_SESSION, SubmarineSessionClass))
#define SUBMARINE_IS_SESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SUBMARINE_TYPE_SESSION))
#define SUBMARINE_IS_SESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SUBMARINE_TYPE_SESSION))
#define SUBMARINE_SESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SUBMARINE_TYPE_SESSION, SubmarineSessionClass))

typedef struct _SubmarineSession SubmarineSession;
typedef struct _SubmarineSessionClass SubmarineSessionClass;
typedef struct _SubmarineSessionPrivate SubmarineSessionPrivate;

#define SUBMARINE_TYPE_SUBTITLE (submarine_subtitle_get_type ())
#define SUBMARINE_SUBTITLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SUBMARINE_TYPE_SUBTITLE, SubmarineSubtitle))
#define SUBMARINE_SUBTITLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SUBMARINE_TYPE_SUBTITLE, SubmarineSubtitleClass))
#define SUBMARINE_IS_SUBTITLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SUBMARINE_TYPE_SUBTITLE))
#define SUBMARINE_IS_SUBTITLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SUBMARINE_TYPE_SUBTITLE))
#define SUBMARINE_SUBTITLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SUBMARINE_TYPE_SUBTITLE, SubmarineSubtitleClass))

typedef struct _SubmarineSubtitle SubmarineSubtitle;
typedef struct _SubmarineSubtitleClass SubmarineSubtitleClass;
typedef struct _SubmarineSubtitlePrivate SubmarineSubtitlePrivate;

struct _SubmarineCacheData {
	GTypeInstance parent_instance;
	volatile int ref_count;
	SubmarineCacheDataPrivate * priv;
};

struct _SubmarineCacheDataClass {
	GTypeClass parent_class;
	void (*finalize) (SubmarineCacheData *self);
};

struct _SubmarineLanguageInfo {
	gchar* _long_code;
	gchar* _long_code_alt;
	gchar* _short_code;
	gchar* _name;
};

typedef enum  {
	SUBMARINE_DATA_TYPE_UNKNOWN,
	SUBMARINE_DATA_TYPE_FREETEXT,
	SUBMARINE_DATA_TYPE_YEAR,
	SUBMARINE_DATA_TYPE_SEASON_CHAPTER,
	SUBMARINE_DATA_TYPE_CODEC,
	SUBMARINE_DATA_TYPE_RESOLUTION,
	SUBMARINE_DATA_TYPE_SOURCE
} SubmarineDataType;

typedef enum  {
	SUBMARINE_RESOLUTION_PAL_NTSC,
	SUBMARINE_RESOLUTION_HDREADY,
	SUBMARINE_RESOLUTION_FULLHD,
	SUBMARINE_RESOLUTION_UNKNOWN
} SubmarineResolution;

typedef enum  {
	SUBMARINE_CODEC_X264,
	SUBMARINE_CODEC_DIVX,
	SUBMARINE_CODEC_XVID,
	SUBMARINE_CODEC_MPEG,
	SUBMARINE_CODEC_UNKNOWN
} SubmarineCodec;

typedef enum  {
	SUBMARINE_SOURCE_DVDRIP,
	SUBMARINE_SOURCE_BDRIP,
	SUBMARINE_SOURCE_HDTV,
	SUBMARINE_SOURCE_UNKNOWN
} SubmarineSource;

struct _SubmarineNameParserNode {
	GTypeInstance parent_instance;
	volatile int ref_count;
	SubmarineNameParserNodePrivate * priv;
	SubmarineNameParserNode* next;
	SubmarineNameParserNode* prev;
	SubmarineNameParserNode* child;
	SubmarineNameParserNode* iterator;
	SubmarineDataType type;
	SubmarineResolution resolution;
	SubmarineCodec codec;
	SubmarineSource source;
	gdouble confidence;
	gint year;
	gint season;
	gint chapter;
	gint level;
};

struct _SubmarineNameParserNodeClass {
	GTypeClass parent_class;
	void (*finalize) (SubmarineNameParserNode *self);
};

struct _SubmarineNameParser {
	GTypeInstance parent_instance;
	volatile int ref_count;
	SubmarineNameParserPrivate * priv;
	gchar* title;
	gint year;
	gint season;
	gint chapter;
	SubmarineResolution resolution;
	SubmarineCodec codec;
	SubmarineSource source;
};

struct _SubmarineNameParserClass {
	GTypeClass parent_class;
	void (*finalize) (SubmarineNameParser *self);
};

struct _SubmarineServerInfo {
	gchar* _name;
	gchar* _address;
	gchar* _code;
};

struct _SubmarineSession {
	GObject parent_instance;
	SubmarineSessionPrivate * priv;
};

struct _SubmarineSessionClass {
	GObjectClass parent_class;
};

struct _SubmarineSubtitle {
	GTypeInstance parent_instance;
	volatile int ref_count;
	SubmarineSubtitlePrivate * priv;
};

struct _SubmarineSubtitleClass {
	GTypeClass parent_class;
	void (*finalize) (SubmarineSubtitle *self);
};


#define SUBMARINE_CONSTANTS_DATADIR "/usr/share"
#define SUBMARINE_CONSTANTS_PKGDATADIR "/usr/share/submarine"
#define SUBMARINE_CONSTANTS_GETTEXT_PACKAGE "submarine"
#define SUBMARINE_CONSTANTS_RELEASE_NAME "submarine"
#define SUBMARINE_CONSTANTS_VERSION "1.0.0"
gpointer submarine_cache_data_ref (gpointer instance);
void submarine_cache_data_unref (gpointer instance);
GParamSpec* submarine_param_spec_cache_data (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void submarine_value_set_cache_data (GValue* value, gpointer v_object);
void submarine_value_take_cache_data (GValue* value, gpointer v_object);
gpointer submarine_value_get_cache_data (const GValue* value);
GType submarine_cache_data_get_type (void) G_GNUC_CONST;
SubmarineCacheData* submarine_cache_data_new (const gchar* filename, gint64 version);
SubmarineCacheData* submarine_cache_data_construct (GType object_type, const gchar* filename, gint64 version);
gchar* submarine_cache_data_get_key (SubmarineCacheData* self, const gchar* key);
void submarine_cache_data_set_key (SubmarineCacheData* self, const gchar* key, const gchar* val);
GType submarine_language_info_get_type (void) G_GNUC_CONST;
SubmarineLanguageInfo* submarine_language_info_dup (const SubmarineLanguageInfo* self);
void submarine_language_info_free (SubmarineLanguageInfo* self);
void submarine_language_info_copy (const SubmarineLanguageInfo* self, SubmarineLanguageInfo* dest);
void submarine_language_info_destroy (SubmarineLanguageInfo* self);
void submarine_language_info_init (SubmarineLanguageInfo *self, const gchar* long_code, const gchar* long_code_alt, const gchar* short_code, const gchar* name);
const gchar* submarine_language_info_get_long_code (SubmarineLanguageInfo* self);
const gchar* submarine_language_info_get_long_code_alt (SubmarineLanguageInfo* self);
const gchar* submarine_language_info_get_short_code (SubmarineLanguageInfo* self);
const gchar* submarine_language_info_get_name (SubmarineLanguageInfo* self);
GeeList* submarine_get_language_codes (void);
SubmarineLanguageInfo* submarine_get_language_info (const gchar* language_code);
gchar* submarine_get_alternate (const gchar* language);
GType submarine_data_type_get_type (void) G_GNUC_CONST;
GType submarine_resolution_get_type (void) G_GNUC_CONST;
GType submarine_codec_get_type (void) G_GNUC_CONST;
GType submarine_source_get_type (void) G_GNUC_CONST;
gpointer submarine_name_parser_node_ref (gpointer instance);
void submarine_name_parser_node_unref (gpointer instance);
GParamSpec* submarine_param_spec_name_parser_node (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void submarine_value_set_name_parser_node (GValue* value, gpointer v_object);
void submarine_value_take_name_parser_node (GValue* value, gpointer v_object);
gpointer submarine_value_get_name_parser_node (const GValue* value);
GType submarine_name_parser_node_get_type (void) G_GNUC_CONST;
gchar* submarine_name_parser_node_get_inner_text (SubmarineNameParserNode* self);
SubmarineNameParserNode* submarine_name_parser_node_new_empty (void);
SubmarineNameParserNode* submarine_name_parser_node_construct_empty (GType object_type);
SubmarineNameParserNode* submarine_name_parser_node_new_new_copy (SubmarineNameParserNode* p);
SubmarineNameParserNode* submarine_name_parser_node_construct_new_copy (GType object_type, SubmarineNameParserNode* p);
SubmarineNameParserNode* submarine_name_parser_node_new (const gchar* txt, SubmarineNameParserNode* thenext, gint c_level);
SubmarineNameParserNode* submarine_name_parser_node_construct (GType object_type, const gchar* txt, SubmarineNameParserNode* thenext, gint c_level);
void submarine_name_parser_node_print_content (SubmarineNameParserNode* self);
void submarine_name_parser_node_reset_iterator (SubmarineNameParserNode* self);
SubmarineNameParserNode* submarine_name_parser_node_get_next_iterator (SubmarineNameParserNode* self);
gpointer submarine_name_parser_ref (gpointer instance);
void submarine_name_parser_unref (gpointer instance);
GParamSpec* submarine_param_spec_name_parser (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void submarine_value_set_name_parser (GValue* value, gpointer v_object);
void submarine_value_take_name_parser (GValue* value, gpointer v_object);
gpointer submarine_value_get_name_parser (const GValue* value);
GType submarine_name_parser_get_type (void) G_GNUC_CONST;
SubmarineNameParser* submarine_name_parser_new (GFile* file);
SubmarineNameParser* submarine_name_parser_construct (GType object_type, GFile* file);
GType submarine_server_info_get_type (void) G_GNUC_CONST;
SubmarineServerInfo* submarine_server_info_dup (const SubmarineServerInfo* self);
void submarine_server_info_free (SubmarineServerInfo* self);
void submarine_server_info_copy (const SubmarineServerInfo* self, SubmarineServerInfo* dest);
void submarine_server_info_destroy (SubmarineServerInfo* self);
void submarine_server_info_init (SubmarineServerInfo *self, const gchar* name, const gchar* address, const gchar* code);
const gchar* submarine_server_info_get_name (SubmarineServerInfo* self);
const gchar* submarine_server_info_get_address (SubmarineServerInfo* self);
const gchar* submarine_server_info_get_code (SubmarineServerInfo* self);
GeeList* submarine_get_server_codes (void);
SubmarineServerInfo* submarine_get_server_info (const gchar* server_code);
GType submarine_session_get_type (void) G_GNUC_CONST;
SubmarineSession* submarine_session_new (void);
SubmarineSession* submarine_session_construct (GType object_type);
gboolean submarine_session_server_connect (SubmarineSession* self, const gchar* server_code);
GeeSet* submarine_session_server_connect_multiple (SubmarineSession* self, GeeCollection* server_codes);
void submarine_session_server_disconnect (SubmarineSession* self, const gchar* server_code);
void submarine_session_server_disconnect_multiple (SubmarineSession* self, GeeCollection* server_codes);
gpointer submarine_subtitle_ref (gpointer instance);
void submarine_subtitle_unref (gpointer instance);
GParamSpec* submarine_param_spec_subtitle (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void submarine_value_set_subtitle (GValue* value, gpointer v_object);
void submarine_value_take_subtitle (GValue* value, gpointer v_object);
gpointer submarine_value_get_subtitle (const GValue* value);
GType submarine_subtitle_get_type (void) G_GNUC_CONST;
GeeSet* submarine_session_subtitle_search (SubmarineSession* self, const gchar* filename, GeeCollection* languages);
GeeMultiMap* submarine_session_subtitle_search_multiple (SubmarineSession* self, GeeCollection* filenames, GeeCollection* languages);
SubmarineSubtitle* submarine_session_subtitle_download (SubmarineSession* self, SubmarineSubtitle* subtitle);
GeeSet* submarine_session_subtitle_download_multiple (SubmarineSession* self, GeeCollection* subtitle_set);
SubmarineSubtitle* submarine_subtitle_new (SubmarineServerInfo* server_info, GValue* server_data);
SubmarineSubtitle* submarine_subtitle_construct (GType object_type, SubmarineServerInfo* server_info, GValue* server_data);
gchar* submarine_subtitle_get_filename (SubmarineSubtitle* self, const gchar* movie_filename);
const gchar* submarine_subtitle_get_format (SubmarineSubtitle* self);
void submarine_subtitle_set_format (SubmarineSubtitle* self, const gchar* value);
const gchar* submarine_subtitle_get_language (SubmarineSubtitle* self);
void submarine_subtitle_set_language (SubmarineSubtitle* self, const gchar* value);
gdouble submarine_subtitle_get_rating (SubmarineSubtitle* self);
void submarine_subtitle_set_rating (SubmarineSubtitle* self, gdouble value);
const gchar* submarine_subtitle_get_data (SubmarineSubtitle* self);
void submarine_subtitle_set_data (SubmarineSubtitle* self, const gchar* value);
void submarine_subtitle_get_server_info (SubmarineSubtitle* self, SubmarineServerInfo* result);
void submarine_subtitle_get_server_data (SubmarineSubtitle* self, GValue* result);
gboolean submarine_subtitle_get_has_data (SubmarineSubtitle* self);


G_END_DECLS

#endif
