/* Submarine.vapi generated by valac 0.28.0, do not modify. */

namespace SubmarineConstants {
	[CCode (cheader_filename = "Submarine.h")]
	public const string DATADIR;
	[CCode (cheader_filename = "Submarine.h")]
	public const string GETTEXT_PACKAGE;
	[CCode (cheader_filename = "Submarine.h")]
	public const string PKGDATADIR;
	[CCode (cheader_filename = "Submarine.h")]
	public const string RELEASE_NAME;
	[CCode (cheader_filename = "Submarine.h")]
	public const string VERSION;
}
namespace Submarine {
	[CCode (cheader_filename = "Submarine.h")]
	public class CacheData {
		public CacheData (string filename, int64 version);
		public string? get_key (string key);
		public void set_key (string key, string val);
	}
	[CCode (cheader_filename = "Submarine.h")]
	public class NameParser {
		public int chapter;
		public Submarine.Codec codec;
		public Submarine.Resolution resolution;
		public int season;
		public Submarine.Source source;
		public string title;
		public int year;
		public NameParser (GLib.File file);
	}
	[CCode (cheader_filename = "Submarine.h")]
	public class NameParserNode {
		public int chapter;
		public Submarine.NameParserNode? child;
		public Submarine.Codec codec;
		public double confidence;
		public Submarine.NameParserNode? iterator;
		public int level;
		public Submarine.NameParserNode? next;
		public weak Submarine.NameParserNode? prev;
		public Submarine.Resolution resolution;
		public int season;
		public Submarine.Source source;
		public Submarine.DataType type;
		public int year;
		public NameParserNode (string txt, Submarine.NameParserNode? thenext = null, int c_level = 2);
		public NameParserNode.empty ();
		public string get_inner_text ();
		public Submarine.NameParserNode? get_next_iterator ();
		public NameParserNode.new_copy (Submarine.NameParserNode? p);
		public void print_content ();
		public void reset_iterator ();
	}
	[CCode (cheader_filename = "Submarine.h")]
	public class Session : GLib.Object {
		public Session ();
		public bool server_connect (string server_code);
		public Gee.Set<string> server_connect_multiple (Gee.Collection<string> server_codes = new Gee.HashSet<string> (null, null));
		public void server_disconnect (string server_code);
		public void server_disconnect_multiple (Gee.Collection<string> server_codes = new Gee.HashSet<string> (null, null));
		public Submarine.Subtitle? subtitle_download (Submarine.Subtitle subtitle);
		public Gee.Set<Submarine.Subtitle> subtitle_download_multiple (Gee.Collection<Submarine.Subtitle> subtitle_set);
		public Gee.Set<Submarine.Subtitle> subtitle_search (string filename, Gee.Collection<string> languages);
		public Gee.MultiMap<string,Submarine.Subtitle> subtitle_search_multiple (Gee.Collection<string> filenames, Gee.Collection<string> languages);
	}
	[CCode (cheader_filename = "Submarine.h")]
	public class Subtitle {
		public Subtitle (Submarine.ServerInfo server_info, GLib.Value server_data);
		public string get_filename (string movie_filename);
		public string data { get; set; }
		public string format { get; set; }
		public bool has_data { get; }
		public string language { get; set; }
		public double rating { get; set; }
		public GLib.Value server_data { get; private set; }
		public Submarine.ServerInfo server_info { get; private set; }
	}
	[CCode (cheader_filename = "Submarine.h")]
	public struct LanguageInfo {
		public string _long_code;
		public string? _long_code_alt;
		public string? _short_code;
		public string _name;
		public LanguageInfo (string long_code, string long_code_alt, string short_code, string name);
		public string long_code { get; private set; }
		public string? long_code_alt { get; private set; }
		public string name { get; private set; }
		public string? short_code { get; private set; }
	}
	[CCode (cheader_filename = "Submarine.h")]
	public struct ServerInfo {
		public string _name;
		public string _address;
		public string _code;
		public ServerInfo (string name, string address, string code);
		public string address { get; private set; }
		public string code { get; private set; }
		public string name { get; private set; }
	}
	[CCode (cheader_filename = "Submarine.h")]
	public enum Codec {
		X264,
		DIVX,
		XVID,
		MPEG,
		UNKNOWN
	}
	[CCode (cheader_filename = "Submarine.h")]
	public enum DataType {
		UNKNOWN,
		FREETEXT,
		YEAR,
		SEASON_CHAPTER,
		CODEC,
		RESOLUTION,
		SOURCE
	}
	[CCode (cheader_filename = "Submarine.h")]
	public enum Resolution {
		PAL_NTSC,
		HDREADY,
		FULLHD,
		UNKNOWN
	}
	[CCode (cheader_filename = "Submarine.h")]
	public enum Source {
		DVDRIP,
		BDRIP,
		HDTV,
		UNKNOWN
	}
	[CCode (cheader_filename = "Submarine.h")]
	public static string get_alternate (string language);
	[CCode (cheader_filename = "Submarine.h")]
	public static Gee.List<string> get_language_codes ();
	[CCode (cheader_filename = "Submarine.h")]
	public static Submarine.LanguageInfo? get_language_info (string language_code);
	[CCode (cheader_filename = "Submarine.h")]
	public static Gee.List<string> get_server_codes ();
	[CCode (cheader_filename = "Submarine.h")]
	public static Submarine.ServerInfo? get_server_info (string server_code);
}
